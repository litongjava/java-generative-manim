# -*- coding: utf-8 -*-
import os
import numpy as np
import requests
from contextlib import contextmanager
from manim import *
import hashlib
from moviepy import AudioFileClip # Correct import
import manimpango # For font checking

# --- Font Check --- (Ensure a standard font is available)
DEFAULT_FONT = "Arial" # Use a common default font
available_fonts = manimpango.list_fonts()
final_font = None

if DEFAULT_FONT in available_fonts:
    print(f"Font '{DEFAULT_FONT}' found.")
    final_font = DEFAULT_FONT
else:
    print(f"Warning: Font '{DEFAULT_FONT}' not found. Trying fallback fonts...")
    # Fallbacks for general English text
    fallback_fonts = ["Helvetica", "Verdana", "DejaVu Sans", "Liberation Sans"]
    found_fallback = False
    for font in fallback_fonts:
        if font in available_fonts:
            print(f"Switched to fallback font: '{font}'")
            final_font = font
            found_fallback = True
            break
    if not found_fallback:
        print(f"Warning: Neither '{DEFAULT_FONT}' nor fallback fonts found. Using Manim default.")
        # final_font remains None

# --- Custom Colors ---
MY_LIGHT_BLUE_BG = "#E3F2FD" # Light blue background
MY_WATER_BLUE = "#90CAF9"   # Water medium color
MY_GLASS_BLUE = "#B0E0E6"   # Glass medium color (alternative)
MY_AIR_ALPHA = 0.0         # Air is transparent
MY_DARK_TEXT = "#1E293B"   # Dark text color
MY_HIGHLIGHT_RED = "#E53935" # Incident angle, etc.
MY_HIGHLIGHT_GREEN = "#43A047" # Refracted angle, etc.
MY_RAY_YELLOW = "#FFCA28"   # Light ray color
MY_NORMAL_GRAY = "#757575"   # Normal line color
MY_FORMULA_BLUE = "#0D47A1"  # Formula color
MY_WHITE = "#FFFFFF"        # Subtitles on dark bg
MY_BLACK = "#000000"        # Subtitles on light bg
MY_PENCIL_BROWN = "#8D6E63"  # Pencil color
from manim.utils.color.SVGNAMES import BROWN # Import BROWN

# --- TTS Caching Setup ---
CACHE_DIR = r"#(output_path)/audio"
os.makedirs(CACHE_DIR, exist_ok=True)

class CustomVoiceoverTracker:
    """Tracks audio path and duration for TTS."""
    def __init__(self, audio_path, duration):
        self.audio_path = audio_path
        self.duration = duration

def get_cache_filename(text):
    """Generates a unique filename based on the text hash."""
    text_hash = hashlib.md5(text.encode('utf-8')).hexdigest()
    return os.path.join(CACHE_DIR, f"{text_hash}.mp3")

@contextmanager
def custom_voiceover_tts(text, token="123456", base_url="https://uni-ai.fly.dev/api/manim/tts"):
    """Fetches TTS audio, caches it, and provides path and duration."""
    cache_file = get_cache_filename(text)
    audio_file = cache_file

    if os.path.exists(cache_file):
        # print(f"Using cached TTS for: {text[:30]}...")
        pass # Use cached file
    else:
        # print(f"Requesting TTS for: {text[:30]}...")
        try:
            input_text_encoded = requests.utils.quote(text)
            url = f"{base_url}?token={token}&input={input_text_encoded}"
            response = requests.get(url, stream=True, timeout=60)
            response.raise_for_status()
            with open(cache_file, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk: f.write(chunk)
            audio_file = cache_file
            # print("TTS downloaded and cached.")
        except requests.exceptions.RequestException as e:
            print(f"TTS API request failed: {e}")
            tracker = CustomVoiceoverTracker(None, 0)
            yield tracker
            return
        except Exception as e:
            print(f"An error occurred during TTS processing: {e}")
            if os.path.exists(cache_file): os.remove(cache_file) # Clean up partial file
            tracker = CustomVoiceoverTracker(None, 0)
            yield tracker
            return

    # Get duration
    duration = 0
    if audio_file and os.path.exists(audio_file):
        try:
            with AudioFileClip(audio_file) as clip:
                duration = clip.duration
            # print(f"Audio duration: {duration:.2f}s")
        except Exception as e:
            print(f"Error processing audio file {audio_file}: {e}")
            audio_file = None
            duration = 0
    else:
        # print(f"TTS audio file not found or not created: {audio_file}")
        audio_file = None

    tracker = CustomVoiceoverTracker(audio_file, duration)
    try:
        yield tracker
    finally:
        pass # Keep cache

# -----------------------------
# CombinedScene: Explaining Refraction of Light
# -----------------------------
class CombinedScene(Scene):
    """
    Explains the phenomenon of light refraction using diagrams and examples.
    Uses English for narration and subtitles.
    """
    def setup(self):
        Scene.setup(self)
        # Set default font if found
        if final_font:
            Text.set_default(font=final_font)
        # Variable to hold the current scene number mobject
        self.current_scene_num_mob = None
        # Store elements needed across animations within a scene part
        self.diagram_elements = VGroup()

    def update_scene_number(self, number_str, color=MY_DARK_TEXT):
        """Fades out the old scene number and fades in the new one."""
        new_scene_num = Text(number_str, font_size=24, color=color).to_corner(UR, buff=MED_LARGE_BUFF).set_z_index(10)
        animations = [FadeIn(new_scene_num, run_time=0.5)]
        if self.current_scene_num_mob:
            animations.append(FadeOut(self.current_scene_num_mob, run_time=0.5))
        self.play(*animations)
        self.current_scene_num_mob = new_scene_num # Update the reference

    def clear_and_reset(self):
        """Clears all objects and resets necessary states."""
        # Clear updaters from all mobjects first
        mobjects_to_clear = list(self.mobjects) # Make a copy
        for mob in mobjects_to_clear:
            if mob is not None and hasattr(mob, 'get_updaters') and mob.get_updaters():
                mob.clear_updaters()

        # Fade out all valid mobjects
        valid_mobjects = [m for m in self.mobjects if m is not None]
        if valid_mobjects:
            self.play(FadeOut(Group(*valid_mobjects)), run_time=0.5)

        self.clear() # Clears self.mobjects

        # Reset stored groups
        self.diagram_elements = VGroup()

        # Reset camera (if using MovingCameraScene, otherwise not needed for Scene)
        # self.camera.frame.move_to(ORIGIN)
        # self.camera.frame.set(width=config.frame_width, height=config.frame_height)

        self.wait(0.1)

    def construct(self):
        # --- Play Scenes Sequentially ---
        self.play_scene_01()
        # Scene 2 builds on Scene 1, so no clear here

        self.play_scene_02()
        # Scene 3 builds on Scene 2 diagram, so no clear here

        self.play_scene_03()
        self.clear_and_reset() # Clear after Scene 3

        self.play_scene_04()
        self.clear_and_reset()

        self.play_scene_05()
        # Final wait is handled in play_scene_05

    # --- Scene 1: Introduction ---
    def play_scene_01(self):
        """Scene 1: Introduces the phenomenon of refraction."""
        # Background
        bg1 = Rectangle(width=config.frame_width, height=config.frame_height,
                        fill_color=MY_LIGHT_BLUE_BG, fill_opacity=1.0, stroke_width=0).set_z_index(-10)
        self.add(bg1)

        # Scene Number
        self.update_scene_number("01", color=MY_DARK_TEXT)

        # Title
        title = Text("Refraction of Light", font_size=60, color=MY_DARK_TEXT)
        title.to_edge(UP, buff=MED_LARGE_BUFF)

        # Media Interface
        interface_y = 0
        interface = Line(LEFT * config.frame_width / 2, RIGHT * config.frame_width / 2, color=MY_DARK_TEXT).move_to(UP * interface_y)

        # Media Backgrounds (Subtle)
        air_rect = Rectangle(width=config.frame_width, height=config.frame_height/2, fill_color=MY_LIGHT_BLUE_BG, fill_opacity=MY_AIR_ALPHA, stroke_width=0).next_to(interface, UP, buff=0)
        water_rect = Rectangle(width=config.frame_width, height=config.frame_height/2, fill_color=MY_WATER_BLUE, fill_opacity=0.3, stroke_width=0).next_to(interface, DOWN, buff=0)
        media_bg = VGroup(air_rect, water_rect).set_z_index(-5)

        # Light Ray Calculation
        incident_angle_deg = 45
        incident_angle_rad = np.radians(incident_angle_deg)
        n1 = 1.0 # Air
        n2 = 1.33 # Water
        # Snell's Law: n1 * sin(theta1) = n2 * sin(theta2) => sin(theta2) = (n1/n2) * sin(theta1)
        sin_theta2 = (n1 / n2) * np.sin(incident_angle_rad)
        # Ensure argument for arcsin is valid
        if abs(sin_theta2) <= 1:
            refracted_angle_rad = np.arcsin(sin_theta2)
        else:
            print("Warning: Invalid angle calculation. Using default.")
            refracted_angle_rad = np.radians(32) # Default fallback angle

        incidence_point = ORIGIN + UP * interface_y

        # Calculate ray vectors based on angles relative to the normal (DOWN)
        incident_vector = rotate_vector(UP * 3, PI - incident_angle_rad) # From top-left
        ray_start = incidence_point + incident_vector
        refracted_vector = rotate_vector(DOWN * 3, refracted_angle_rad) # Towards bottom-right
        ray_end = incidence_point + refracted_vector

        incident_ray = Arrow(ray_start, incidence_point, buff=0, color=MY_RAY_YELLOW, stroke_width=4)
        refracted_ray = Arrow(incidence_point, ray_end, buff=0, color=MY_RAY_YELLOW, stroke_width=4)

        # Labels for Media
        air_label = Text("Air", font_size=24, color=MY_DARK_TEXT).next_to(air_rect, UP, buff=-LARGE_BUFF).to_edge(LEFT, buff=MED_LARGE_BUFF)
        water_label = Text("Water", font_size=24, color=MY_DARK_TEXT).next_to(water_rect, DOWN, buff=-LARGE_BUFF).to_edge(LEFT, buff=MED_LARGE_BUFF)
        media_labels = VGroup(air_label, water_label)

        # Store elements needed for the next scene
        self.diagram_elements.add(title, interface, media_bg, incident_ray, refracted_ray, media_labels)

        # Narration 1: Intro (English)
        voice_text_01 = "Hello everyone! Have you ever noticed that when light passes from one medium, like air, into another, like water, its path bends? This phenomenon is called refraction of light."
        with custom_voiceover_tts(voice_text_01) as tracker:
            if tracker.audio_path and tracker.duration > 0:
                self.add_sound(tracker.audio_path)
            else:
                print("Warning: Narration 1 TTS failed.")

            subtitle_voice = Text(voice_text_01, font_size=28, color=MY_BLACK, width=config.frame_width - 2, should_center=True).to_edge(DOWN, buff=MED_SMALL_BUFF)

            # Animation Sequence
            self.play(FadeIn(title), FadeIn(subtitle_voice), run_time=1.0)
            self.play(Create(interface), FadeIn(media_bg), FadeIn(media_labels), run_time=1.5)
            self.play(Create(incident_ray), run_time=1.0)
            self.play(Create(refracted_ray), run_time=1.0)

            # Synchronization
            anim_duration = 1.0 + 1.5 + 1.0 + 1.0
            wait_time = max(0, tracker.duration - anim_duration - 0.5) # Subtract subtitle fadeout time
            if wait_time > 0: self.wait(wait_time)
            self.play(FadeOut(subtitle_voice), run_time=0.5)

        self.wait(1)
        # Keep elements for Scene 2

    # --- Scene 2: Key Concepts ---
    def play_scene_02(self):
        """Scene 2: Defines key terms: rays, normal, angles."""
        # Scene number update
        self.update_scene_number("02", color=MY_DARK_TEXT)

        # Retrieve elements from Scene 1 stored in self.diagram_elements
        if not self.diagram_elements:
             print("Error: diagram_elements is empty in Scene 2!")
             return

        # Access elements safely
        try:
            title = self.diagram_elements[0] # Keep title
            interface = self.diagram_elements[1]
            incident_ray = self.diagram_elements[3]
            refracted_ray = self.diagram_elements[4]
            incidence_point = incident_ray.get_end() # Point where ray hits interface
        except IndexError:
            print("Error: Not enough elements in diagram_elements for Scene 2!")
            return # Prevent crash

        # Normal Line
        normal = DashedLine(incidence_point + UP * 2, incidence_point + DOWN * 2, color=MY_NORMAL_GRAY, stroke_width=2)
        normal_label = Text("Normal", font_size=20, color=MY_NORMAL_GRAY).next_to(normal.get_start(), RIGHT, buff=SMALL_BUFF)

        # Angles Calculation
        normal_vector_down = DOWN
        normal_vector_up = UP
        incident_vector = incident_ray.get_vector()
        refracted_vector = refracted_ray.get_vector()

        # Angle between incident ray and the UP part of the normal
        angle_inc_rad = angle_between_vectors(incident_vector, normal_vector_up)
        # Angle between refracted ray and the DOWN part of the normal
        angle_ref_rad = angle_between_vectors(refracted_vector, normal_vector_down)

        # Create Arcs based on calculated angles
        angle_inc_arc = Arc(radius=0.6, start_angle=normal.get_angle() - PI/2 , angle=angle_inc_rad, arc_center=incidence_point, color=MY_HIGHLIGHT_RED)
        angle_ref_arc = Arc(radius=0.6, start_angle=normal.get_angle() + PI/2, angle=-angle_ref_rad, arc_center=incidence_point, color=MY_HIGHLIGHT_GREEN) # Negative angle for clockwise

        theta1_label = MathTex(r"\theta_1", font_size=30, color=MY_HIGHLIGHT_RED).move_to(
             Arc(radius=0.8, start_angle=normal.get_angle() - PI/2, angle=angle_inc_rad, arc_center=incidence_point).point_from_proportion(0.5)
        )
        theta2_label = MathTex(r"\theta_2", font_size=30, color=MY_HIGHLIGHT_GREEN).move_to(
             Arc(radius=0.8, start_angle=normal.get_angle() + PI/2, angle=-angle_ref_rad, arc_center=incidence_point).point_from_proportion(0.5)
        )

        # Ray Labels
        inc_ray_label = Text("Incident Ray", font_size=20, color=MY_DARK_TEXT).next_to(incident_ray.get_start(), UP+LEFT, buff=SMALL_BUFF)
        ref_ray_label = Text("Refracted Ray", font_size=20, color=MY_DARK_TEXT).next_to(refracted_ray.get_end(), DOWN+RIGHT, buff=SMALL_BUFF)

        # Add new elements to diagram group (append to existing)
        new_elements = VGroup(normal, normal_label, angle_inc_arc, angle_ref_arc, theta1_label, theta2_label, inc_ray_label, ref_ray_label)
        self.diagram_elements.add(*new_elements)

        # Explanation Text (Positioned on the right)
        explanation = VGroup(
            Text("Key Concepts:", font_size=32, color=MY_DARK_TEXT, weight=BOLD),
            Text("• Incident Ray: Light entering the interface.", font_size=24, color=MY_DARK_TEXT),
            Text("• Refracted Ray: Light after passing the interface.", font_size=24, color=MY_DARK_TEXT),
            Text("• Normal: Line perpendicular to the interface.", font_size=24, color=MY_DARK_TEXT),
            Text("• Angle of Incidence (θ₁): Angle between incident ray and normal.", font_size=24, color=MY_DARK_TEXT),
            Text("• Angle of Refraction (θ₂): Angle between refracted ray and normal.", font_size=24, color=MY_DARK_TEXT),
            Text("Refraction occurs because light travels at different speeds in different media.", font_size=24, color=MY_DARK_TEXT, line_spacing=1.2)
        ).arrange(DOWN, aligned_edge=LEFT, buff=0.25)
        explanation.to_edge(RIGHT, buff=LARGE_BUFF).shift(UP*0.5) # Position on right

        # Narration 2: Key Concepts (English)
        voice_text_02 = "Let's define some key terms. The incident ray is the light entering the interface. The refracted ray is the light after passing through. The normal is an imaginary line perpendicular to the interface. The angle of incidence, theta one, is the angle between the incident ray and the normal. The angle of refraction, theta two, is the angle between the refracted ray and the normal. Refraction happens mainly because the speed of light changes as it moves from one medium to another."
        with custom_voiceover_tts(voice_text_02) as tracker:
            if tracker.audio_path and tracker.duration > 0:
                self.add_sound(tracker.audio_path)
            else:
                print("Warning: Narration 2 TTS failed.")

            subtitle_voice = Text(voice_text_02, font_size=28, color=MY_BLACK, width=config.frame_width - 2, should_center=True).to_edge(DOWN, buff=MED_SMALL_BUFF)

            # Animation Sequence
            self.play(FadeIn(subtitle_voice), run_time=0.5)
            self.play(Create(normal), FadeIn(normal_label), run_time=1.5)
            self.play(FadeIn(inc_ray_label), FadeIn(ref_ray_label), run_time=1.0)
            self.play(Create(angle_inc_arc), Write(theta1_label), run_time=1.0)
            self.play(Create(angle_ref_arc), Write(theta2_label), run_time=1.0)
            self.play(FadeIn(explanation, shift=LEFT*0.5), run_time=2.0)

            # Synchronization
            anim_duration = 0.5 + 1.5 + 1.0 + 1.0 + 1.0 + 2.0
            wait_time = max(0, tracker.duration - anim_duration - 0.5) # Subtract fade out time
            if wait_time > 0: self.wait(wait_time)
            self.play(FadeOut(subtitle_voice), FadeOut(explanation), run_time=0.5) # Keep diagram

        self.wait(0.5)
        # Keep diagram elements for Scene 3

    # --- Scene 3: Snell's Law ---
    def play_scene_03(self):
        """Scene 3: Introduces Snell's Law."""
        # Scene number update
        self.update_scene_number("03", color=MY_DARK_TEXT)

        # Retrieve elements from previous scenes stored in self.diagram_elements
        if not self.diagram_elements:
             print("Error: diagram_elements is empty in Scene 3!")
             return

        # Access media labels safely
        try:
            # Assuming media_labels (VGroup of air/water Text) is the 6th element added overall
            media_labels_group = self.diagram_elements[5]
            n1_label = media_labels_group[0] # Air label
            n2_label = media_labels_group[1] # Water label
        except IndexError:
             print("Error: Could not find media labels in diagram_elements for Scene 3!")
             n1_label = Text("Air").to_edge(UP).to_edge(LEFT) # Dummy position
             n2_label = Text("Water").to_edge(DOWN).to_edge(LEFT) # Dummy position
             self.add(n1_label, n2_label) # Add dummies if needed

        # Snell's Law Formula
        snell_law_formula = MathTex(
            r"n_1 \sin \theta_1", r"=", r"n_2 \sin \theta_2",
            font_size=48, color=MY_FORMULA_BLUE
        )
        # Color parts of the formula using the main MathTex object
        snell_law_formula.set_color_by_tex("n_1", MY_DARK_TEXT)
        snell_law_formula.set_color_by_tex(r"\theta_1", MY_HIGHLIGHT_RED)
        snell_law_formula.set_color_by_tex("n_2", MY_DARK_TEXT)
        snell_law_formula.set_color_by_tex(r"\theta_2", MY_HIGHLIGHT_GREEN)

        snell_law_formula.to_edge(UP, buff=1.5).shift(RIGHT*2) # Position top right

        # Explanation of n1, n2 (Refractive Index)
        n1_math = MathTex(r"n_1", font_size=36, color=MY_DARK_TEXT).next_to(n1_label, DOWN, buff=SMALL_BUFF, aligned_edge=LEFT)
        n2_math = MathTex(r"n_2", font_size=36, color=MY_DARK_TEXT).next_to(n2_label, UP, buff=SMALL_BUFF, aligned_edge=LEFT)

        # Add n1, n2 labels to diagram elements
        self.diagram_elements.add(n1_math, n2_math)

        # Explanation Text
        explanation_snell = VGroup(
             Text("Snell's Law:", font_size=32, color=MY_DARK_TEXT, weight=BOLD),
             Text("Describes the relationship between the angles.", font_size=24, color=MY_DARK_TEXT),
             Text("n₁ and n₂ are the refractive indices of the media.", font_size=24, color=MY_DARK_TEXT),
             Text("The refractive index relates to the speed of light in the medium.", font_size=24, color=MY_DARK_TEXT, line_spacing=1.2)
        ).arrange(DOWN, aligned_edge=LEFT, buff=0.25)
        explanation_snell.next_to(snell_law_formula, DOWN, buff=MED_LARGE_BUFF, aligned_edge=LEFT)

        # Narration 3: Snell's Law (English)
        voice_text_03 = "The mathematical law describing this refraction is called Snell's Law. Its formula is n one sine theta one equals n two sine theta two. Here, n one and n two are the refractive indices of medium 1 and medium 2, respectively. This index reflects how fast light travels in that medium. Theta one is the angle of incidence, and theta two is the angle of refraction. This law precisely tells us how much the light ray will bend."
        with custom_voiceover_tts(voice_text_03) as tracker:
            if tracker.audio_path and tracker.duration > 0:
                self.add_sound(tracker.audio_path)
            else:
                print("Warning: Narration 3 TTS failed.")

            subtitle_voice = Text(voice_text_03, font_size=28, color=MY_BLACK, width=config.frame_width - 2, should_center=True).to_edge(DOWN, buff=MED_SMALL_BUFF)

            # Animation Sequence
            self.play(FadeIn(subtitle_voice), run_time=0.5)
            self.play(Write(snell_law_formula), run_time=2.0)
            self.play(FadeIn(n1_math), FadeIn(n2_math), run_time=1.0)
            self.play(FadeIn(explanation_snell, shift=LEFT*0.2), run_time=2.0)
            # Add highlights synchronized roughly with narration parts
            self.wait(1.0) # Wait before highlights
            # Use get_part_by_tex on the main MathTex object
            self.play(Indicate(snell_law_formula.get_part_by_tex("n_1"), color=MY_DARK_TEXT))
            self.wait(0.5)
            self.play(Indicate(snell_law_formula.get_part_by_tex(r"\theta_1"), color=MY_HIGHLIGHT_RED))
            self.wait(1.0)
            self.play(Indicate(snell_law_formula.get_part_by_tex("n_2"), color=MY_DARK_TEXT))
            self.wait(0.5)
            self.play(Indicate(snell_law_formula.get_part_by_tex(r"\theta_2"), color=MY_HIGHLIGHT_GREEN))
            self.wait(1.0)

            # Synchronization
            highlight_duration = 4 * (0.8 + 0.5) # Approx time for 4 indicates + waits
            anim_duration = 0.5 + 2.0 + 1.0 + 2.0 + 1.0 + highlight_duration + 1.0
            wait_time = max(0, tracker.duration - anim_duration - 0.5) # Subtract fade out time
            if wait_time > 0: self.wait(wait_time)
            self.play(FadeOut(subtitle_voice), FadeOut(explanation_snell), run_time=0.5)

        self.wait(0.5)
        # Diagram elements will be cleared by clear_and_reset next

    # --- Scene 4: Examples/Applications ---
    def play_scene_04(self):
        """Scene 4: Shows examples like bent pencil and prism."""
        # Background
        bg4 = Rectangle(width=config.frame_width, height=config.frame_height,
                        fill_color=MY_LIGHT_BLUE_BG, fill_opacity=1.0, stroke_width=0).set_z_index(-10)
        self.add(bg4)

        # Scene Number
        self.update_scene_number("04", color=MY_DARK_TEXT)

        # Title
        title = Text("Refraction in Everyday Life", font_size=48, color=MY_DARK_TEXT)
        title.to_edge(UP, buff=MED_LARGE_BUFF)

        # --- Left Side: Bent Pencil ---
        pencil_title = Text("Bent Pencil Illusion", font_size=32, color=MY_DARK_TEXT)

        # Glass and Water
        glass_width = 2.0
        glass_height = 3.0
        water_level_rel = 0.6 # 60% filled
        glass = Rectangle(width=glass_width, height=glass_height, color=MY_DARK_TEXT, stroke_width=2)
        water = Rectangle(width=glass_width, height=glass_height * water_level_rel,
                          fill_color=MY_WATER_BLUE, fill_opacity=0.5, stroke_width=0)
        water.align_to(glass, DOWN)
        glass_group = VGroup(glass, water)

        # Pencil (Two parts for bending effect)
        pencil_angle = -PI / 6
        pencil_top_start = glass.get_top() + LEFT * 0.5 + UP * 1.0
        interface_y_level = glass.get_bottom()[1] + glass_height * water_level_rel
        pencil_dir_air = normalize(DOWN + RIGHT * np.tan(pencil_angle))
        t_intersect = (interface_y_level - pencil_top_start[1]) / pencil_dir_air[1]
        pencil_interface_intersect = pencil_top_start + t_intersect * pencil_dir_air

        pencil_part_air = Line(pencil_top_start, pencil_interface_intersect, color=BROWN, stroke_width=8)

        # Calculate refracted angle (simplified)
        inc_angle_pencil = PI/2 + pencil_angle
        sin_ref_pencil = (1.0 / 1.33) * np.sin(inc_angle_pencil)
        if abs(sin_ref_pencil) <= 1:
             ref_angle_pencil = np.arcsin(sin_ref_pencil)
        else:
             ref_angle_pencil = inc_angle_pencil # Fallback
        refracted_pencil_dir = rotate_vector(DOWN, ref_angle_pencil - PI/2)

        pencil_part_water = Line(pencil_interface_intersect, pencil_interface_intersect + refracted_pencil_dir * 1.8, color=BROWN, stroke_width=8)

        pencil_group = VGroup(pencil_part_air, pencil_part_water)
        pencil_visual = VGroup(glass_group, pencil_group).scale(1.2)
        pencil_visual_group = VGroup(pencil_title, pencil_visual).arrange(DOWN, buff=MED_LARGE_BUFF)
        pencil_visual_group.to_edge(LEFT, buff=LARGE_BUFF)

        # --- Right Side: Prism Dispersion ---
        prism_title = Text("Rainbows / Dispersion", font_size=32, color=MY_DARK_TEXT)

        # Prism
        prism = Triangle(color=MY_GLASS_BLUE, fill_opacity=0.4).scale(1.5)
        prism.rotate(-PI/2) # Pointing up

        # Incident White Light
        white_ray_start = prism.get_left() + LEFT*2 + UP*0.5
        white_ray_end = prism.get_center() + LEFT*0.5 # Point near center of left face
        white_ray = Arrow(white_ray_start, white_ray_end, buff=0, color=WHITE, stroke_width=3)

        # Refracted/Dispersed Rays (Simplified exit points)
        exit_point_base = prism.get_center() + RIGHT*0.5 # Point near center of right face
        red_exit = exit_point_base + RIGHT*2 + UP*0.3
        green_exit = exit_point_base + RIGHT*2
        blue_exit = exit_point_base + RIGHT*2 + DOWN*0.3

        red_ray = Arrow(white_ray_end, red_exit, buff=0, color=RED, stroke_width=2)
        green_ray = Arrow(white_ray_end, green_exit, buff=0, color=GREEN, stroke_width=2)
        blue_ray = Arrow(white_ray_end, blue_exit, buff=0, color=BLUE, stroke_width=2)
        dispersed_rays = VGroup(red_ray, green_ray, blue_ray)

        prism_visual = VGroup(prism, white_ray, dispersed_rays)
        prism_visual_group = VGroup(prism_title, prism_visual).arrange(DOWN, buff=MED_LARGE_BUFF)
        prism_visual_group.to_edge(RIGHT, buff=LARGE_BUFF)

        # Narration 4: Examples (English)
        voice_text_04 = "Refraction is all around us. For example, when you put a straw or pencil in water, it looks 'broken' at the surface. This is because light rays from the submerged part bend when they exit the water into the air. Another beautiful example is a rainbow. Raindrops act like tiny prisms, refracting and dispersing sunlight into its different colors."
        with custom_voiceover_tts(voice_text_04) as tracker:
            if tracker.audio_path and tracker.duration > 0:
                self.add_sound(tracker.audio_path)
            else:
                print("Warning: Narration 4 TTS failed.")

            subtitle_voice = Text(voice_text_04, font_size=28, color=MY_BLACK, width=config.frame_width - 2, should_center=True).to_edge(DOWN, buff=MED_SMALL_BUFF)

            # Animation Sequence
            self.play(FadeIn(title), FadeIn(subtitle_voice), run_time=1.0)
            # Animate pencil example
            self.play(FadeIn(pencil_visual_group[0]), Create(pencil_visual_group[1][0]), run_time=1.5) # Title and glass
            self.play(Create(pencil_visual_group[1][1]), run_time=1.5) # Pencil
            self.wait(4.0) # Wait for narration part about pencil

            # Animate prism example
            self.play(FadeIn(prism_visual_group[0]), Create(prism_visual_group[1][0]), run_time=1.5) # Title and prism
            self.play(Create(prism_visual_group[1][1]), run_time=1.0) # White ray
            self.play(AnimationGroup(
                Create(prism_visual_group[1][2][0]), # Red
                Create(prism_visual_group[1][2][1]), # Green
                Create(prism_visual_group[1][2][2]), # Blue
                lag_ratio=0.3
            ), run_time=2.0) # Dispersed rays
            self.wait(4.0) # Wait for narration part about prism

            # Synchronization
            anim_duration = 1.0 + 1.5 + 1.5 + 4.0 + 1.5 + 1.0 + 2.0 + 4.0
            wait_time = max(0, tracker.duration - anim_duration - 0.5) # Subtract fade out time
            if wait_time > 0: self.wait(wait_time)
            self.play(FadeOut(subtitle_voice), run_time=0.5)

        self.wait(1)

    # --- Scene 5: Conclusion ---
    def play_scene_05(self):
        """Scene 5: Summarizes the concept."""
        # Background
        bg5 = Rectangle(width=config.frame_width, height=config.frame_height,
                        fill_color=MY_FORMULA_BLUE, fill_opacity=1.0, stroke_width=0).set_z_index(-10) # Darker background
        self.add(bg5)

        # Scene Number
        self.update_scene_number("05", color=MY_WHITE)

        # Title
        title = Text("Summary", font_size=48, color=MY_WHITE)
        title.to_edge(UP, buff=MED_LARGE_BUFF)

        # Recap Text
        recap_text1 = Text("• Refraction is the bending of light as it passes between media.", font_size=30, color=MY_WHITE, width=config.frame_width - 4)
        recap_text2 = Text("• It's caused by the change in the speed of light.", font_size=30, color=MY_WHITE, width=config.frame_width - 4)
        # Use MathTex for the formula part
        recap_text3_part1 = Text("• Snell's Law (", font_size=30, color=MY_WHITE)
        recap_text3_part2 = MathTex(r"n_1 \sin \theta_1 = n_2 \sin \theta_2", font_size=32, color=MY_RAY_YELLOW)
        recap_text3_part3 = Text(") describes this relationship.", font_size=30, color=MY_WHITE)
        recap_text3 = VGroup(recap_text3_part1, recap_text3_part2, recap_text3_part3).arrange(RIGHT, buff=SMALL_BUFF)

        recap_group = VGroup(recap_text1, recap_text2, recap_text3).arrange(DOWN, aligned_edge=LEFT, buff=0.4)
        recap_group.next_to(title, DOWN, buff=LARGE_BUFF)

        # Final Thanks
        thanks_text = Text("Thanks for watching!", font_size=36, color=MY_WHITE)
        thanks_text.to_edge(DOWN, buff=LARGE_BUFF)

        # Narration 5: Conclusion (English)
        voice_text_05 = "To summarize, refraction is the change in direction of light when it crosses the boundary between different media, caused by a change in light's speed. Snell's Law gives us the precise way to calculate this change. Hopefully, this video helped you understand the refraction of light better! Thanks for watching!"
        with custom_voiceover_tts(voice_text_05) as tracker:
            if tracker.audio_path and tracker.duration > 0:
                self.add_sound(tracker.audio_path)
            else:
                print("Warning: Narration 5 TTS failed.")

            subtitle_voice = Text(voice_text_05, font_size=28, color=MY_WHITE, width=config.frame_width - 2, should_center=True).to_edge(DOWN, buff=MED_SMALL_BUFF)
            # Position subtitle above thanks text
            subtitle_voice.next_to(thanks_text, UP, buff=MED_LARGE_BUFF)

            # Animation Sequence
            self.play(FadeIn(title), FadeIn(subtitle_voice), run_time=1.0)
            # Animate recap lines
            self.play(FadeIn(recap_text1, shift=UP*0.1), run_time=1.5)
            self.play(FadeIn(recap_text2, shift=UP*0.1), run_time=1.5)
            # Animate the combined Text/MathTex line
            self.play(AnimationGroup(
                FadeIn(recap_text3[0]), Write(recap_text3[1]), FadeIn(recap_text3[2]),
                lag_ratio=0.1
            ), run_time=2.0)
            self.play(FadeIn(thanks_text), run_time=1.0)

            # Synchronization
            anim_duration = 1.0 + 1.5 + 1.5 + 2.0 + 1.0
            wait_time = max(0, tracker.duration - anim_duration - 0.5) # Subtract fade out time
            if wait_time > 0: self.wait(wait_time)
            self.play(FadeOut(subtitle_voice), run_time=0.5)

        # Final wait before ending
        self.wait(2)
        # Fade out the last scene number
        if self.current_scene_num_mob:
            self.play(FadeOut(self.current_scene_num_mob))

# --- Main execution block ---
if __name__ == "__main__":
    # Basic configuration
    config.pixel_height = 1080  # Set resolution height
    config.pixel_width = 1920   # Set resolution width
    config.frame_rate = 30      # Set frame rate
    config.output_file = "CombinedScene"  # Specify output filename
    config.disable_caching = True  # Disable caching

    # Set output directory using placeholder
    config.media_dir = r"#(output_path)" # IMPORTANT: Use the placeholder

    # Create and render the scene
    scene = CombinedScene()
    scene.render()

    print(f"Scene rendering finished. Output in: {config.media_dir}")